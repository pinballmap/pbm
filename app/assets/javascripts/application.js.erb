var map;
var region;
var region_id;
var ismap;
var numMachinesVal;
var locationTypeVal;
var mapAdjusted;
var mapLoaded = 0;
var search_string;
var zoomLevel;
var locationIDs = new Array();
var searchSections = new Array();
var refresh_bounds;
var by_at_least_n_machines;
var by_type_id;
var by_machine_id;
var by_machine_single_id;
var locations_geojson;
var position_lat;
var position_lon;

function toggleData(name, id) {
  var main = id ? '_' + id : '';

  $('#' + name + main).toggle();
}

function toggle_machine_data(name, id) {
  if (name == 'add_machine_location') {
    $('#add_machine_location_' + id).toggle();
  } else {
    $('#add_machine_location_' + id).hide();
  }
  if (name == 'add_picture_location') {
    $('#add_picture_location_' + id).toggle();
  } else {
    $('#add_picture_location_' + id).hide();
  }
  if (name == 'recent_location_activity_location') {
    $('#recent_location_activity_location_' + id).toggle();
  } else {
    $('#recent_location_activity_location_' + id).hide();
  }
  if (name == 'former_machines_location') {
    $('#former_machines_location_' + id).toggle();
  } else {
    $('#former_machines_location_' + id).hide();
  }
}

function regionMapLocations(region_id) {
  mapAdjusted === 0;
  var region_id = region_id;

  $('#locations').html(loadingHTML());

  $.ajax({
    url: "/region_init_load",
    type: "POST",
    data: { region_id },
    success: function(data) {
      $('#locations').html(data);
      refresh_bounds = undefined;
      mapAdjusted = 0;
    }
  });
}

function homeMapBounds() {
  mapAdjusted === 0;
  var boundsData = {
    ne: {
      lat: 51.548723456055654,
      lng: -62.94988899172626
    },
    sw: {
      lat: 28.455566729679656,
      lng: -124.99526427873955
    },
  }

  $('#locations').html(loadingHTML());

  $.ajax({
    url: "/map_bounds",
    type: "POST",
    data: { boundsData: boundsData },
    success: function(data) {
      $('#locations').html(data);
      refresh_bounds = undefined;
      mapAdjusted = 0;
    }
  });
}

function getMapBounds(by_at_least_n_machines, by_type_id, by_machine_id, by_machine_single_id) {
  refresh_bounds = map.getBounds();
  var boundsData = {
    ne: refresh_bounds.getNorthEast(),
    sw: refresh_bounds.getSouthWest(),
  };
  $('#locations').html(loadingHTML());

  document.getElementById('search_link_wrapper').style.display = "none";

  $.ajax({
    url: "/map_bounds",
    type: "POST",
    data: { boundsData: boundsData, by_at_least_n_machines: by_at_least_n_machines, by_type_id: by_type_id, by_machine_id: by_machine_id, by_machine_single_id: by_machine_single_id },
    success: function(data) {
      $('#locations').html(data);
      refresh_bounds = undefined;
      mapAdjusted = 0;
      map.getSource("point").setData({
        'type': 'FeatureCollection',
        'features': locations_geojson
      });
    }
  });
}

function showLocations() {
  let protocol = new pmtiles.Protocol();
  maplibregl.addProtocol("pmtiles", protocol.tile);

  if (typeof refresh_bounds == 'undefined') {
    var bounds = new maplibregl.LngLatBounds();
    bounds_padding = 50;
  } else {
    var bounds = refresh_bounds;
    bounds_padding = 0;
  }

  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches){
    var map_style = map_style_obj_dark;
  } else {
    var map_style = map_style_obj;
  }

  if (mapAdjusted === 0 || mapLoaded == 0) {
    map = new maplibregl.Map({
      container: 'map_canvas',
      style: map_style,
    });
    map.dragRotate.disable();
    map.keyboard.disable();
    map.touchZoomRotate.disableRotation();
    map.addControl(new maplibregl.ScaleControl({unit: 'imperial'}), 'bottom-right');
    map.addControl(new maplibregl.NavigationControl(), 'bottom-right');
    map.addControl(new maplibregl.FullscreenControl(), 'top-right');
    mapLoaded = 1;
  }

  map.on('load', async () => {
    marker_1 = await map.loadImage("<%= asset_path('marker-1.png') %>");
    map.addImage('marker-1', marker_1.data);

    marker_2 = await map.loadImage("<%= asset_path('marker-2.png') %>");
    map.addImage('marker-2', marker_2.data);

    marker_2_1_sel = await map.loadImage("<%= asset_path('marker-2-1-sel.png') %>");
    map.addImage('marker-2-1-sel', marker_2_1_sel.data);

    marker_10 = await map.loadImage("<%= asset_path('marker-10.png') %>");
    map.addImage('marker-10', marker_10.data);

    marker_10_sel = await map.loadImage("<%= asset_path('marker-10-sel.png') %>");
    map.addImage('marker-10-sel', marker_10_sel.data);

    marker_z_1 = await map.loadImage("<%= asset_path('marker-z-1.png') %>");
    map.addImage('marker-z-1', marker_z_1.data);

    marker_z_2 = await map.loadImage("<%= asset_path('marker-z-2.png') %>");
    map.addImage('marker-z-2', marker_z_2.data);

    marker_z_10 = await map.loadImage("<%= asset_path('marker-z-10.png') %>");
    map.addImage('marker-z-10', marker_z_10.data);

    marker_z_sel = await map.loadImage("<%= asset_path('marker-z-sel.png') %>");
    map.addImage('marker-z-sel', marker_z_sel.data);

    map.addSource('point', {
      'type': 'geojson',
      'data': {
        'type': 'FeatureCollection',
        'features': locations_geojson
      }
    });

    map.addLayer({
      'id': 'points',
      'type': 'symbol',
      'source': 'point',
      'layout': {
        'icon-image': [
          "step", ["zoom"],
          ["case", ["<=", ["get", "machine_count"], 1], 'marker-z-1',
            ["case", ["<=", ["get", "machine_count"], 9], 'marker-z-2',
            'marker-z-10']], 9,
          ["case", ["<=", ["get", "machine_count"], 1], 'marker-1',
            ["case", ["<=", ["get", "machine_count"], 9], 'marker-2',
            'marker-10']],
        ],
        'icon-size': ["interpolate", ["linear"], ["zoom"], 1, 0.14, 4, 0.18, 9, 0.6, 16, 0.9],
        "symbol-sort-key": ["get", "order"],
        'text-field': ["step", ["zoom"],
          "", 9,
          ["case", [">", ["get", "machine_count"], 9], ["get", "machine_count"], ""], 12,
          ["case", [">", ["get", "machine_count"], 1], ["get", "machine_count"], ""],
          14,
          ["get", "machine_count"],
        ],

        "text-font": ["Noto Sans Medium"],
        'text-size': ["interpolate", ["linear"], ["zoom"], 9, 16, 14, 22],

        "icon-allow-overlap": true,
        "icon-ignore-placement": true,
        "text-allow-overlap": true,
        "text-ignore-placement": false,
        // "text-optional": true,
        // "text-overlap": 'never',

        // "text-overlap": 'always',
        // "icon-allow-overlap": true,
      }
    });
  });

  if (locations_geojson.length === 1) {
    var location_coords = []
    locations_geojson.forEach(function(feature) {
      location_coords = feature.geometry.coordinates;
    });
    map.setZoom(18);
    map.setCenter(location_coords);
    hideRefresh();
    refreshButton();
  } else if (locations_geojson.length == 0) {
    document.getElementById("map_canvas").innerHTML = "<p id='not_found' class='font28 red bold'>" + "NOT FOUND. PLEASE SEARCH AGAIN." + "<br />" + "Use the dropdown or the autocompleting textbox if you want results." + "</p>";
    mapLoaded = 0;
    hideRefresh();
    document.getElementById('nearby_activity_button').style.display = "none";
  } else {
    locations_geojson.forEach(function(feature) {
      bounds.extend(feature.geometry.coordinates);
    });
    map.fitBounds(bounds, { padding: bounds_padding, animate: false });
    hideRefresh();
    refreshButton();
  }

  // map.on('zoom', () => {
  //   console.log(map.getZoom());
  // });

  map.on('click', 'points', function (e) {
    showLocationDetail(e.features[0].properties.id);
    map.setLayoutProperty('points', 'icon-image',
      ["step", ["zoom"],
      ['match', ['id'], e.features[0].id, 'marker-z-sel',
        ["case", ["<=", ["get", "machine_count"], 1], 'marker-z-1',
        ["case", ["<=", ["get", "machine_count"], 9], 'marker-z-2',
          'marker-z-10']]
      ],
      9,
      ['match', ['id'], e.features[0].id,
        ["case", ["<=", ["get", "machine_count"], 9], 'marker-2-1-sel',
          'marker-10-sel'],
        ["case", ["<=", ["get", "machine_count"], 1], 'marker-1',
        ["case", ["<=", ["get", "machine_count"], 9], 'marker-2',
          'marker-10']]
      ]]
    )
  });
}

function hideRefresh() {
  document.getElementById("refresh_button").style.display = "none";
}

function refreshButton() {
  map.on('zoomend', function () {
    document.getElementById("refresh_button").style.display = "block";
    mapAdjusted = 1;
  });
  map.on('dragend', function () {
    document.getElementById("refresh_button").style.display = "block";
    mapAdjusted = 1;
  });
}

function loadingHTML() {
  return "<div class='loading'><img src='<%= asset_path 'map_loading.gif' %>' /></div>";
}

function setOtherSearchOptions(newSection) {
  var html = "<span class='black_text'>Search:</span>";
  for (section in searchSections) {
    html += "  <button id='" + searchSections[section] + "_section_link' onclick='switchSection(\"" + searchSections[section] + "\");'>" + searchSections[section] + "</button>\n"
  }

  $('#other_search_options').html(html);
}

function switchSection(newSection) {
  setOtherSearchOptions(newSection);
  $("div .section:visible").hide();
  $('#by_' + newSection).toggle();
  $("#" + newSection + "_section_link").toggleClass("active_section_link");
}

function initSearch(userFaved, operatorIDs, locationIDs, locationTypeIDs, zoneIDs, machineIDs, machineID, ipdbIDs, opdbIDs, cityName, machineGroupId, showLocationDistance, lat, lon, byAtLeastNMachines, byAtLeastNMachinesCity, byAtLeastNMachinesType, byAtLeastNMachinesZone, byCityName, byStateName, byICActive, region) {
  if (userFaved || operatorIDs || locationIDs || locationTypeIDs || zoneIDs || machineIDs || machineID || ipdbIDs || opdbIDs || cityName || machineGroupId || byAtLeastNMachines || byAtLeastNMachinesCity || byAtLeastNMachinesType || byAtLeastNMachinesZone || (byCityName && byStateName) || byICActive || region) {

    if (region && !(userFaved || operatorIDs || locationIDs || locationTypeIDs || zoneIDs || machineIDs || machineID || ipdbIDs || opdbIDs || cityName || machineGroupId || byAtLeastNMachines || byAtLeastNMachinesCity || byAtLeastNMachinesType || byAtLeastNMachinesZone || (byCityName && byStateName) || byICActive)) {
      return;
    }

    if ((byCityName && !byStateName) || (!byCityName && byStateName)) {
      return;
    } else {
      var cityState = '&by_city_name=' + byCityName + '&by_state_name=' + byStateName;
    }

    var url = '/locations?user_faved=' + userFaved + '&by_location_id=' + locationIDs + '&by_operator_id=' + operatorIDs + '&by_type_id=' + locationTypeIDs + '&by_zone_id=' + zoneIDs + '&by_machine_id=' + machineIDs + '&by_machine_single_id=' + machineID + '&by_city_id=' + cityName + '&by_machine_group_id=' + machineGroupId + '&by_ipdb_id=' + ipdbIDs + '&by_opdb_id=' + opdbIDs + '&show_location_distance=' + showLocationDistance + '&lat=' + lat + '&lon=' + lon + '&by_at_least_n_machines=' + byAtLeastNMachines + '&by_at_least_n_machines_city=' + byAtLeastNMachinesCity + '&by_at_least_n_machines_type=' + byAtLeastNMachinesType + '&by_at_least_n_machines_zone=' + byAtLeastNMachinesZone + cityState + '&by_ic_active=' + byICActive + '&region=' + region ;

    $('#locations').html(loadingHTML());
    $.get(url, function (data) {
      $('#locations').html(data);
    });
  }
}

function findClosestLocations() {
  navigator.geolocation.getCurrentPosition(function (position) {
    position_lat = position.coords.latitude;
    position_lon = position.coords.longitude;

    $.ajax({
      url: "/map_nearby",
      type: "POST",
      data: { position_lat: position_lat, position_lon: position_lon },
      success: function(data) {
        $('#locations').html(data);
        mapAdjusted = 0;
      }
    });

  }, function () {
    alert('No dice.');
  });
}

function showLocationDetail(locationID) {
  $('.location_detail').hide();
  $('#intro_container').css('display','none');

  if ($('#location_detail').is(":hidden")) {
    $('#show_location_detail_location_' + locationID).hide();
    $('.sub_nav_location').hide();
    $('.back_to_results').show();
    $('#marker_' + locationID).removeClass('marker').addClass('marker2');
    $('#location_detail').toggle();

    $('#location_detail').html(loadingHTML());
    $.get('/locations/' + locationID + '/render_location_detail', function (data) {
      $('#location_detail').html(data);
    });
  }
}

function backToResults() {
  $('.back_to_results').hide();
  $('.sub_nav_location').show();
  $('#location_detail').hide();
  map.setLayoutProperty('points', 'icon-image', [
          "step", ["zoom"],
          ["case", ["<=", ["get", "machine_count"], 1], 'marker-z-1',
            ["case", ["<=", ["get", "machine_count"], 9], 'marker-z-2',
            'marker-z-10']], 9,
          ["case", ["<=", ["get", "machine_count"], 1], 'marker-1',
            ["case", ["<=", ["get", "machine_count"], 9], 'marker-2',
            'marker-10']],
        ]);
}

function closeActivity() {
  document.getElementById('nearby_activity_container').innerHTML = "";
}

function showSearchModal() {
  $('#form_container').show(400);
}

function hideSearchModal() {
  if ($('.search_modal').css('display') == 'block') {
    $('#form_container').hide(400);
  }
}

function setRegion(regionName) {
  region = regionName;
}

function setSearchSections(newSearchSections) {
  searchSections = newSearchSections;
}

function updateLocationUpdatedText(id) {
  $('#last_updated_location_' + id).load('/locations/' + id + '/render_last_updated');
  $('#stale_' + id).hide();
  return false;
}

var fade_flash = function () {
  $("#flash_notice").delay(2400).fadeOut("slow");
  $("#flash_alert").delay(2400).fadeOut("slow");
  $("#flash_error").delay(2400).fadeOut("slow");
};
fade_flash();

var show_ajax_message = function (msg, type) {
  $("#flash-message").html('<div id="flash_' + type + '">' + msg + '</div>');
  fade_flash();
};

function show_new_machine_message() {
  alert('Please choose a machine from the list. If the machine is not in the list, it is likely a game (e.g., a non-pinball game) that we do not include on Pinball Map. If you think the list is missing a pinball machine, please contact us.');
};
